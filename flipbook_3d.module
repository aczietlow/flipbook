<?php

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_menu().
 */
function flipbook_3d_menu() {

  $items['admin/config/media/flipbook'] = array(
    'title'            => 'jQuery 3D FlipBook',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('flipbook_3d_settings_form'),
    'access arguments' => array('administer flipbook_3d settings'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function flipbook_3d_settings_form($form, &$form_state) {

  $css_path = flipbook_3d_get_module_path() . '/css/flipbook_3d.css';
  drupal_add_css($css_path);

  $form['title'] = array(
    '#markup' => '<h2>jQuery Real 3D FlipBook options</h2>',
  );

  $form['information'] = array(
    '#markup' => '<div><p>' . t("Settings here reflect options you can modify on the jQuery plugin settings array. Proper functionality of the plugin can only be guaranteed by the plugin's author. That said, play with these options until satisfied with the output.") . '</p></div>',
  );

  $form['settings'] = array(
    '#type'   => 'container',
    '#prefix' => '<div id="settings">',
    '#suffix' => '</div><div class="clear"></div>',
  );

  // Form left content.
  $form['settings']['left'] = array(
    '#type'   => 'container',
    '#prefix' => '<div id="settings-left">',
    '#suffix' => '</div>',
  );

  $form['settings']['left']['flipbook_3d_skin'] = array(
    '#type'          => 'select',
    '#title'         => t('Skin'),
    '#options'       => array('light' => t('Light'), 'dark' => t('Dark')),
    '#default_value' => variable_get('flipbook_3d_skin', 'light'),
    '#description'   => t('Select the skin to use when displaying FlipBooks.'),
  );

  $form['settings']['left']['flipbook_3d_rtl'] = array(
    '#type'          => 'select',
    '#title'         => t('Right to left'),
    '#options'       => array('false' => t('Left to right'), 'true' => t('Right to left')),
    '#default_value' => variable_get('flipbook_3d_rtl', 'false'),
    '#description'   => t('Defines if the book mode is normal left to right or right to left for eastern countries.'),
  );

  $form['settings']['left']['flipbook_3d_single_page'] = array(
    '#type'          => 'select',
    '#title'         => t('Page mode'),
    '#options'       => array('false' => t('Double page'), 'true' => t('Single page')),
    '#default_value' => variable_get('flipbook_3d_single_page', 'false'),
    '#description'   => t('If single page layout will be used instead of standard double page layout.'),
  );

  $form['settings']['left']['flipbook_3d_start_page'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Starting page'),
    '#default_value' => variable_get('flipbook_3d_start_page', '1'),
    '#description'   => t('Page that will be displayed when the book starts.'),
    '#size'          => 5,
  );

  $form['settings']['left']['flipbook_3d_pdf_page_scale'] = array(
    '#type'          => 'textfield',
    '#title'         => t('PDF page scale'),
    '#default_value' => variable_get('flipbook_3d_pdf_page_scale', '1.5'),
    '#description'   => t('Set scale of pdf pages that will be rendered to images. Default is 1.5'),
    '#size'          => 5,
  );

  $form['settings']['left']['flipbook_3d_page_width'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Page width'),
    '#default_value' => variable_get('flipbook_3d_page_width', '1000'),
    '#description'   => t('Page width in pixels (should be the same size as the page image width). Default: 1000'),
    '#size'          => 5,
  );

  $form['settings']['left']['flipbook_3d_page_height'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Page height'),
    '#default_value' => variable_get('flipbook_3d_page_height', '1414'),
    '#description'   => t('Page height in pixels (should be the same size as the page image height). Default: 1414'),
    '#size'          => 5,
  );

  $form['settings']['left']['flipbook_3d_thumb_width'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Thumbnail width'),
    '#default_value' => variable_get('flipbook_3d_thumb_width', '100'),
    '#description'   => t('Thumbnail width in pixels (should be the same size as the thumbnail image width). Default: 100'),
    '#size'          => 5,
  );

  $form['settings']['left']['flipbook_3d_thumb_height'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Thumbnail height'),
    '#default_value' => variable_get('flipbook_3d_thumb_height', '141'),
    '#description'   => t('Thumbnail height in pixels (should be the same size as the thumbnail image height). Default: 141'),
    '#size'          => 5,
  );

  // Form right content.
  $form['settings']['right'] = array(
    '#type'   => 'container',
    '#prefix' => '<div id="settings-right">',
    '#suffix' => '</div>',
  );

  $form['settings']['right']['flipbook_3d_content_on_start'] = array(
    '#type'          => 'select',
    '#title'         => t('Content on start'),
    '#options'       => array('false' => t('No'), 'true' => t('Yes')),
    '#default_value' => variable_get('flipbook_3d_content_on_start', 'false'),
    '#description'   => t('If the table of content will be displayed on start. Default : No'),
  );

  $form['settings']['right']['flipbook_3d_thumbs_on_start'] = array(
    '#type'          => 'select',
    '#title'         => t('Thumbnails on start'),
    '#options'       => array('false' => t('No'), 'true' => t('Yes')),
    '#default_value' => variable_get('flipbook_3d_thumbs_on_start', 'false'),
    '#description'   => t('If the thumbnails will be displayed on start. Default : No'),
  );

  $form['settings']['right']['flipbook_3d_view_mode'] = array(
    '#type'          => 'select',
    '#title'         => t('View mode'),
    '#options'       => array('3d' => t('3D'), '2d' => t('2D')),
    '#default_value' => variable_get('flipbook_3d_view_mode', '3d'),
    '#description'   => t('View mode for the flipbook. Default : 3d'),
  );

  $form['settings']['right']['flipbook_3d_shadow_1'] = array(
    '#type'          => 'select',
    '#title'         => t('Page shadow 1'),
    '#options'       => array('false' => t('No'), 'true' => t('Yes')),
    '#default_value' => variable_get('flipbook_3d_shadow_1', 'true'),
    '#description'   => t('Display page shadow 1. Default : Yes'),
  );

  $form['settings']['right']['flipbook_3d_shadow_2'] = array(
    '#type'          => 'select',
    '#title'         => t('Page shadow 2'),
    '#options'       => array('false' => t('No'), 'true' => t('Yes')),
    '#default_value' => variable_get('flipbook_3d_shadow_2', 'true'),
    '#description'   => t('Display page shadow 2. Default : Yes'),
  );

  $form['settings']['right']['flipbook_3d_shadow_3'] = array(
    '#type'          => 'select',
    '#title'         => t('Page shadow 3'),
    '#options'       => array('false' => t('No'), 'true' => t('Yes')),
    '#default_value' => variable_get('flipbook_3d_shadow_3', 'false'),
    '#description'   => t('Display page shadow 3. Default : No'),
  );

  $form['settings']['right']['flipbook_3d_sounds'] = array(
    '#type'          => 'select',
    '#title'         => t('Sounds'),
    '#options'       => array('false' => t('Off'), 'true' => t('On')),
    '#default_value' => variable_get('flipbook_3d_sounds', 'true'),
    '#description'   => t('Defines if the sounds are enabled.'),
  );

  $form['settings']['right']['flipbook_3d_flip_mp3'] = array(
    '#type'          => 'textfield',
    '#title'         => t('MP3 file URL'),
    '#default_value' => variable_get('flipbook_3d_flip_mp3', flipbook_3d_get_library_url() . '/deploy/mp3/turnPage.mp3'),
    '#description'   => t('URL for the mp3 sound file. Default is to look at libraries location.'),
    '#size'          => 80,
  );

  $form['settings']['right']['flipbook_3d_style_css'] = array(
    '#type'          => 'textfield',
    '#title'         => t('FlipBook CSS styles URL'),
    '#default_value' => variable_get('flipbook_3d_style_css', flipbook_3d_get_library_url() . '/deploy/css/flipbook.style.css'),
    '#description'   => t('URL for flipbook css styles. Default is to look at libraries location.'),
    '#size'          => 80,
  );

  $form['settings']['right']['flipbook_3d_font_css'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Font Awesome CSS styles URL'),
    '#default_value' => variable_get('flipbook_3d_font_css', flipbook_3d_get_library_url() . '/deploy/css/font-awesome.css'),
    '#description'   => t('URL for font awesome css styles. Default is to look at libraries location.'),
    '#size'          => 80,
  );

  $form['settings']['right']['flipbook_3d_image_preloader'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Preloader image URL'),
    '#default_value' => variable_get('flipbook_3d_image_preloader', flipbook_3d_get_library_url() . '/deploy/images/preloader.jpg'),
    '#description'   => t('URL for the preloader image. Default is to look at libraries location.'),
    '#size'          => 80,
  );

  $form['settings']['right']['flipbook_3d_image_overlay'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Overlay image URL'),
    '#default_value' => variable_get('flipbook_3d_image_overlay', flipbook_3d_get_library_url() . '/deploy/images/overlay.jpg'),
    '#description'   => t('URL for the overlay image. Default is to look at libraries location.'),
    '#size'          => 80,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_validate().
 */
function flipbook_3d_settings_form_validate($form, &$form_state) {
  $numeric_values = array(
    'flipbook_3d_pdf_page_scale',
    'flipbook_3d_start_page',
    'flipbook_3d_page_width',
    'flipbook_3d_page_height',
    'flipbook_3d_thumb_width',
    'flipbook_3d_thumb_height',
  );
  foreach ($numeric_values as $value) {
    $human_value = str_replace('flipbook_3d_', '', $value);
    $human_value = str_replace('_', ' ', $human_value);
    if (!is_numeric($form_state['values'][$value])) {
      form_set_error(
        $value,
        t(
          'Value for :value must be numeric.',
          array(':value' => $human_value)
        )
      );
    }
    elseif ($form_state['values'][$value] == 0) {
      form_set_error(
        $value,
        t("Value for :value can't be zero.", array(':value' => $human_value))
      );
    }
    elseif ($form_state['values'][$value] < 0) {
      drupal_set_message(
        t(
          'Value for :value must be positive so it was automatically converted.',
          array(':value' => $human_value)
        ),
        'warning'
      );
      $form_state['values'][$value] = abs($form_state['values'][$value]);
    }
    else {
      // Everything checks out.
    }
  }
}


/**
 * Implements hook_node_info().
 */
function flipbook_3d_node_info() {
  return array(
    'flipbook_3d'      => array(
      'name'           => t('3D flipbook'),
      'base'           => 'flipbook_3d',
      'description'    => t('Serves as a flipbook to be placed on the site'),
      'has_title'      => TRUE,
      'title_label'    => t('Name'),
      'custom'         => FALSE,
      'locked'         => TRUE,
      'node_submitted' => FALSE,
      'comment'        => FALSE,
    ),
    'flipbook_3d_page' => array(
      'name'           => t('3D flipbook page'),
      'base'           => 'flipbook_3d',
      'description'    => t(
        'Pages created with images to be added to a flipbook'
      ),
      'has_title'      => TRUE,
      'title_label'    => t('Title'),
      'custom'         => FALSE,
      'locked'         => TRUE,
      'node_submitted' => FALSE,
      'comment'        => FALSE,
    ),
  );
}

/**
 * Implements hook_view().
 */
function flipbook_3d_view($node, $view_mode, $langcode = NULL) {
  libraries_load('real-3d-flipbook');

  return $node;
}

/**
 * Implements hook_theme_registry_alter().
 */
function flipbook_3d_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'flipbook_3d');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects
    = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match(
        '#/themes/#', $theme_registry[$key]['theme path']
      )
    ) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key]
        = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_form().
 */
function flipbook_3d_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_validate().
 */
function flipbook_3d_node_validate($node, $form, &$form_state) {
  switch ($form_state['triggering_element']['#id']) {
    case 'edit-submit':
      $flipbook_from_pdf
        = ($form_state['values']['field_flipbook_3d_pdf_pages'][LANGUAGE_NONE][0]['fid'] == 0)
        ? FALSE : TRUE;
      $flipbook_from_images
        = isset($form_state['values']['field_flipbook_3d_pages'][LANGUAGE_NONE]['entities']);
      $par_pages = $flipbook_from_images ? (count(
          $form_state['values']['field_flipbook_3d_pages'][LANGUAGE_NONE]['entities']
        ) % 2 == 0) ? TRUE : FALSE : FALSE;
      if ($flipbook_from_pdf || $flipbook_from_images) {
        if ($flipbook_from_images && !$par_pages) {
          form_set_error(
            'field_flipbook_3d_pages',
            t(
              'FlipBooks created with images must have an even number of pages to be correctly viewed.'
            )
          );
        }
      }
      else {
        form_set_error(
          'field_flipbook_3d_pdf_pages',
          t(
            'To create a FlipBook you must add pages either via PDF file or images.'
          )
        );
      }
      break;

    default:
      break;
  }
}

/**
 * Implements hook_libraries_info().
 */
function flipbook_3d_libraries_info() {
  $libraries['real-3d-flipbook'] = array(
    'name'             => 'Real 3D FlipBook',
    'vendor url'       => 'http://codecanyon.net/item/real-3d-flipbook-jquery-plugin/4281720',
    'download url'     => 'http://codecanyon.net/item/real-3d-flipbook-jquery-plugin/4281720',
    'path'             => 'source/js',
    'version callback' => 'flipbook_3d_libraries_get_version',
    'files'            => array(
      'js' => array(
        'flipbook.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Validate library version or return TRUE.
 * @return bool
 */
function flipbook_3d_libraries_get_version() {
  return TRUE;
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function flipbook_3d_inline_entity_form_table_fields_alter(&$fields, $context) {
  $css_path = flipbook_3d_get_module_path() . '/css/flipbook_3d.css';
  drupal_add_css($css_path);
  $flipbook_3d_page = FALSE;
  foreach ($context['allowed_bundles'] as $bundle) {
    if ($bundle == 'flipbook_3d_page') {
      $flipbook_3d_page = TRUE;
      break;
    }
  }
  if ($flipbook_3d_page) {
    $fields['title']['weight'] = -50;
    $fields['field_flipbook_3d_page_thumb'] = array(
      'type'   => 'field',
      'label'  => t('Thumbnail'),
      'weight' => -40,
    );
    $fields['field_flipbook_3d_page'] = array(
      'type'   => 'field',
      'label'  => t('Page'),
      'weight' => -30,
    );
  }
}

/**
 * Get server request scheme.
 * @return string
 */
function flipbook_3d_get_request_scheme() {
  $https_1 = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on';
  $https_2 = isset($_SERVER['protossl']) && drupal_strlen($_SERVER['protossl']);
  if ($https_1 || $https_2) {
    return 'https://';
  }
  else {
    return 'http://';
  }
}

/**
 * Get url for the library.
 * @return string
 */
function flipbook_3d_get_library_url() {
  $request_scheme = flipbook_3d_get_request_scheme();

  return
    $request_scheme
    . $_SERVER['SERVER_NAME']
    . '/sites/all/libraries/real-3d-flipbook';
}

/**
 * Get the module's url.
 * @return string
 */
function flipbook_3d_get_module_url() {
  $request_scheme = flipbook_3d_get_request_scheme();

  return
    $request_scheme
    . $_SERVER['SERVER_NAME']
    . '/' . flipbook_3d_get_module_path();
}

/**
 * Get the module's path.
 * @return string
 */
function flipbook_3d_get_module_path() {
  return drupal_get_path('module', 'flipbook_3d');
}

/**
 * Get the module's absolute path.
 * @return string
 */
function flipbook_3d_get_module_absolute_path() {
  $module_path = flipbook_3d_get_module_path();

  return DRUPAL_ROOT . DIRECTORY_SEPARATOR . $module_path;
}
